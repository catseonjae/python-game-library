input_handler 라이브러리

1. 정의
    1) 입력 장치 
        입력을 받을 장치는 키보드, 마우스, 게임기 등이 있다. 그러나 이 문서에서 입력 장치는 키보드의 특정 키, 마우스와 게임기의 특정 버튼 등 입력을 받았거나 안 받았다고 정의할 수 있는 부분을 의미한다.
    2) 상태
        각 입력 장치에 대해 활성화 여부 이외에도 인식할 정보가 있다. '방금 막' 활성화 되었는지와 '방금 막' 비활성화 되었는지의 여부이다. 따라서 다음의 상태들을 정의한다.
        -activated: 활성화됨
        -just_activated: 방금 막 활성화됨
        -leaved: 비활성화됨
        -just_leaved: 방금 막 비활성화됨

2. 동작 원리
    1) 인스턴스화
        input_handler 클래스는 고려할 입력장치들의 이름을 원소로 갖는 리스트를 매개변수로 받으면서 인스턴스화된다. 
    2) 함수 설정
        -set_func(piece,attribute,func)로 입력장치 piece가 상태 attribute를 가질 때 함수(들) func가 실행되도록 할 수 있다. func에는 단일 함수가 와도 되고 함수의 리스트가 와도 된다.
        -append_func(piece,attribute,func)로 입력장치 piece가 상태 attribute를 가질 때 실행될 함수(들)에 func를 추가할 수 있다. func에는 단일 함수가 와도 되고 함수의 리스트가 와도 된다.
    3) 프레임별 업데이트
        -각 프레임에서, 활성화된 입력장치들을 activate(name) 메서드로, 비활성화된 입력장치들을 leave(name) 메서드로 인식시켜준 후에, update() 메서드로 각 입력들에 대한 정보를 업데이트해줘야 한다. 
        -act() 함수로 현재 프레임의 입력 상태에 대응시킨 함수들을 호출한다. 
        
3. 클래스 원형
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Input_handler:
    #인식할 입력장치의 이름을 문자열로 가진 리스트를 받는다.
    def __init__(self,inputs=[]):
        #입력장치가 가질 수 있는 상태들
        self.attributes=["just_activated", "activated", "just_leaved", "leaved"]

    #각각의 입력장치에 대해 현재 상태에 알맞은 함수들을 호출한다. *여러 상태가 참이면 각 상태에 대응되는 모든 함수를 호출한다.
    def act(self):
    
    #입력 장치 piece가 attribute의 상태를 가질 때 호출될 함수들을 func로 설정한다. *func는 개별 함수일수도, 함수 리스트일 수도 있다.
    def set_func(self, piece, attribute, func):
    
    #입력 장치 piece가 attribute의 상태를 가질 때 호출될 함수(들)에 함수(들) func를 추가한다. *func는 개별 함수일수도, 함수 리스트일 수도 있다.
    def append_func(self, piece, attribute, func):
    
    #입력 장치 piece가 활성화되었음을 알린다.
    def activate(self, piece):
    
    #입력 장치 piece가 비활성화되었음을 알린다.
    def leave(self, piece):
    
    #각 입력 장치의 상태를 갱신한다. 
    def update(self):
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Input_handler를 상속받아 각각 pygame의 키 입력과 마우스 입력을 핸들링하는 Pygame_key_input_handler와 Pygame_mouse_input_handler를 사용할 수 있다.
Input_handler는 Pygame 라이브러리에 국한된 클래스가 아니다.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Pygame_key_input_handler(Input_handler):
    #알파벳 키들을 인식한다.
    def __init__(self):
        self.inputs=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
        super().init(self.inputs)
    #key 키를 
    def update_pygame_keydown(self, key):
    def update_pygame_keyup(self,key):
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Pygame_mouse_input_handler(Input_handler):
    def __init__(self):
        self.inputs=['left click','right click','whill click']
        super().init(inputs)
    def update_pygame(self, button):
    def update_pygame_up(self,button):
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
